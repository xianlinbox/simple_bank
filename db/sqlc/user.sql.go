// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUser = `-- name: AddUser :one
INSERT INTO users (
  username, password, full_name, email
) VALUES (
  $1, $2, $3, $4
)
RETURNING username, email, password, full_name, password_expired_at, created_at
`

type AddUserParams struct {
	Username string
	Password string
	FullName string
	Email    string
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (User, error) {
	row := q.db.QueryRow(ctx, addUser,
		arg.Username,
		arg.Password,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.PasswordExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, email, password, full_name, password_expired_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.PasswordExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET 
  password = coalesce($1, password), 
  full_name = coalesce($2, full_name), 
  email = coalesce($3, email)
WHERE username = $4
RETURNING username, email, password, full_name, password_expired_at, created_at
`

type UpdateUserParams struct {
	Password pgtype.Text
	FullName pgtype.Text
	Email    pgtype.Text
	Username string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Password,
		arg.FullName,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Password,
		&i.FullName,
		&i.PasswordExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
