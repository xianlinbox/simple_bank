// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addSession = `-- name: AddSession :one
INSERT INTO sessions (
  id, username, refresh_token, user_agent, client_ip, expired_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, username, refresh_token, user_agent, client_ip, expired_at, created_at
`

type AddSessionParams struct {
	ID           pgtype.UUID
	Username     string
	RefreshToken string
	UserAgent    string
	ClientIp     string
	ExpiredAt    pgtype.Timestamptz
}

func (q *Queries) AddSession(ctx context.Context, arg AddSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, addSession,
		arg.ID,
		arg.Username,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.ExpiredAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSession = `-- name: GetSession :one
SELECT id, username, refresh_token, user_agent, client_ip, expired_at, created_at FROM sessions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id pgtype.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.ExpiredAt,
		&i.CreatedAt,
	)
	return i, err
}
